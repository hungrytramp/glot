## usage

    ./glot.py [-f <filter>] -o <output>[:output-options] input1 ... > output

## output

- `svg-map[:<what>]` renders the input data to SVG and adds a OSM map as a background. you can use this to generate maps like [this](http://instagr.am/p/ThPim/) (this was me crossing Korea by bicycle, BTW).
- `svg-weighted[:<what>]` renders the input data to SVG without adding a map background. colors segments and points based on how many times they appear in the input data. you can use this to generate maps like [this](http://ibz.me/p/bjbus/).
- `plot:<xaxis>-<yaxis>[-avg=n]` plots the elevation and/or speed against distance or time in PNG format. `<xaxis>` is either `distance` or `time`, `<yaxis>` is either `speed` or `elevation` or both, separated by comma. optionally, appending `-avg=n`, where n is a number, will use a moving average with a window of n on each side for the data on the y axis.
- `kml[:<what>]` generates a KML, to be opened in Google Earth.
- `stats` prints some stats about the input file.

output options: "svg-map", "svg-weighted" and "kml" outputs all support rendering the path, the points or both. default is path, for others use the following syntax: "svg-map:points" or "svg-map:path,points".

## input

input files can be either GPX files or files generated by the Columbus V-900 GPS data logger. file type is guessed from the extension (*.gpx or *.CSV).

## filters

- `skip=n` will only consider every n points in the input. useful if you have a huge input but don't want a huge SVG/KML to be generated.
- `name-match-radius=m` will consider points which have the same name and are within a radius of m meters from each other to be the same point. if you want for example to generate a map like [this](http://ibz.me/p/bjbus/), you might not want stations that have the same name and are within say 500m from each other to be threated as separate stations. in that case, you can pass `--name-match-radius=500`.